#!/bin/bash
set -e

echo "üöÄ ArqueoDiario - Build Unificado"
echo "================================="

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: ./build-unified.sh [OPCI√ìN]"
    echo ""
    echo "Opciones:"
    echo "  dev          Ejecutar servidor de desarrollo"
    echo "  build        Build para producci√≥n web"
    echo "  web          Ejecutar aplicaci√≥n web"
    echo "  android      Preparar para APK Android"
    echo "  apk-local    Compilar APK localmente (requiere Android SDK)"
    echo "  apk-cloud    Preparar para compilaci√≥n en la nube"
    echo "  help         Mostrar esta ayuda"
    echo ""
}

# Funci√≥n para desarrollo
dev_mode() {
    echo "üîß Iniciando servidor de desarrollo..."
    NODE_ENV=development npm run dev
}

# Funci√≥n para build de producci√≥n
build_web() {
    echo "üì¶ Generando build de producci√≥n..."
    npm run build
    echo "‚úÖ Build completado en ./dist/"
}

# Funci√≥n para servidor web
web_server() {
    echo "üåê Iniciando servidor web de producci√≥n..."
    if [ ! -d "dist" ]; then
        echo "‚ùå No se encontr√≥ build de producci√≥n. Ejecutando build..."
        build_web
    fi
    NODE_ENV=production npm start
}

# Funci√≥n para preparar Android
prepare_android() {
    echo "üì± Preparando proyecto Android..."
    
    # Verificar si existe build web
    if [ ! -d "dist/public" ]; then
        echo "üì¶ Generando build web primero..."
        build_web
    fi
    
    # Sincronizar Capacitor
    echo "üîÑ Sincronizando Capacitor..."
    npx cap sync android
    
    echo "‚úÖ Proyecto Android listo en ./android/"
    echo ""
    echo "Siguientes pasos para APK:"
    echo "1. Local: ./build-unified.sh apk-local"
    echo "2. Cloud: ./build-unified.sh apk-cloud"
}

# Funci√≥n para compilaci√≥n local de APK
compile_apk_local() {
    echo "üèóÔ∏è Compilando APK localmente..."
    
    # Verificar Android SDK
    if [ -z "$ANDROID_HOME" ]; then
        echo "‚ùå ANDROID_HOME no configurado"
        echo "üìã Pasos para configurar:"
        echo "1. Instalar Android Studio"
        echo "2. export ANDROID_HOME=/path/to/Android/Sdk"
        echo "3. export PATH=\$PATH:\$ANDROID_HOME/platform-tools"
        exit 1
    fi
    
    prepare_android
    
    echo "üî® Compilando APK..."
    cd android
    ./gradlew assembleDebug
    cd ..
    
    echo "‚úÖ APK generado:"
    find android -name "*.apk" -type f
}

# Funci√≥n para preparaci√≥n cloud
prepare_cloud_build() {
    echo "‚òÅÔ∏è Preparando para compilaci√≥n en la nube..."
    
    prepare_android
    
    echo ""
    echo "üìã Opciones de compilaci√≥n en la nube:"
    echo ""
    echo "ü•á IONIC APPFLOW (Recomendado):"
    echo "   1. Subir c√≥digo a GitHub"
    echo "   2. Ir a ionic.io/appflow"
    echo "   3. Conectar repositorio"
    echo "   4. Build autom√°tico"
    echo ""
    echo "ü•à CODEMAGIC:"
    echo "   1. Ir a codemagic.io"
    echo "   2. Usar plantilla 'Capacitor Android'"
    echo "   3. Build visual"
    echo ""
    echo "ü•â GITHUB ACTIONS:"
    echo "   1. Push a GitHub"
    echo "   2. Actions se ejecuta autom√°ticamente"
    echo "   3. Descargar APK de artifacts"
    echo ""
    echo "‚úÖ Proyecto listo para cualquier opci√≥n"
}

# Funci√≥n para verificar dependencias
check_dependencies() {
    echo "üîç Verificando dependencias..."
    
    # Node.js
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js no encontrado"
        exit 1
    fi
    
    # npm
    if ! command -v npm &> /dev/null; then
        echo "‚ùå npm no encontrado"
        exit 1
    fi
    
    # Capacitor CLI
    if ! command -v cap &> /dev/null; then
        echo "‚ö†Ô∏è Capacitor CLI no encontrado globalmente, usando npx"
    fi
    
    echo "‚úÖ Dependencias verificadas"
}

# Funci√≥n principal
main() {
    case "$1" in
        "dev")
            check_dependencies
            dev_mode
            ;;
        "build")
            check_dependencies
            build_web
            ;;
        "web")
            check_dependencies
            web_server
            ;;
        "android")
            check_dependencies
            prepare_android
            ;;
        "apk-local")
            check_dependencies
            compile_apk_local
            ;;
        "apk-cloud")
            check_dependencies
            prepare_cloud_build
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            echo "‚ùå Opci√≥n no v√°lida: $1"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# Ejecutar funci√≥n principal
main "$@"